generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookmark      bookmark[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model bookmark {
  bookmark_id        String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id                 String               @default(dbgenerated("gen_random_uuid()"))
  title              String
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?            @default(now()) @db.Timestamp(6)
  User               User                 @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bookmark_books     bookmark_books[]
  bookmark_libraries bookmark_libraries[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model bookmark_books {
  bookmark_id String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  number      BigInt
  isbn        String
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  bookmark    bookmark  @relation(fields: [bookmark_id], references: [bookmark_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([bookmark_id, number])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model bookmark_libraries {
  bookmark_id String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  number      BigInt
  system_id   String
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  libkey      String
  bookmark    bookmark  @relation(fields: [bookmark_id], references: [bookmark_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([bookmark_id, number, system_id, libkey])
}
