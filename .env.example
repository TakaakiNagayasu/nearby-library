# ローカルの場合「.env.local」、リモートの場合「.env」ファイルを本プロジェクト直下に作成してください。
# 作成後、本ファイルの内容を作成したファイル内にコピーし、説明に従い各値を入力してください。

# Supabase - Dashboard
# https://supabase.com/dashboard/projects
# 任意のOrganization発行後、「New Project」からプロジェクトを発行。
# Supabase用に任意のパスワードを入力すること。

# ローカルの場合：postgresql://postgres:【Supabaseのパスワード】@db.【SupabaseのプロジェクトID】.supabase.co:5432/postgres
# リモートの場合：postgresql://postgres.【SupabaseのプロジェクトID】:【Supabaseのパスワード】@aws-0-ap-northeast-1.pooler.supabase.com:6543/postgres?pgbouncer=true&connection_limit=1
DATABASE_URL=

# GitHub Settings / Developer Settings
# https://github.com/settings/developers
# 「New OAuth App」 を押下
# Application name：任意の名前
# Homepage URL：ローカルの場合「http://localhost:3000」、リモートの場合【公開予定ページのホームのURL】
# Authorization callback URL」：「Homepage URL」の文字列の後ろに「/api/auth/callback/github」を繋げる
# 上記3つを入力後、「Register application」を押下

# 「Homepage URL」と同じ文字列
NEXTAUTH_URL=
# OpenSSLを導入している端末でコマンド「openssl rand -base64 32」を入力しパスワード生成
# https://yaruben.sakura.ne.jp/openssl/rand.php?LANG=ja
NEXTAUTH_SECRET=
# https://github.com/settings/developers
# 登録したOauth Appsを押下→「Client ID」
GITHUB_CLIENT_ID=
# https://github.com/settings/developers
# 登録したOauth Appsを押下→「Generate a new client secret」
GITHUB_CLIENT_SECRET=

# Google Cloud 認証情報 APIとサービス
# https://console.cloud.google.com/apis/credentials?hl=ja
# ログインし、任意のプロジェクトを作成後、「＋認証情報を作成」→「APIキー」で発行
NEXT_PUBLIC_GOOGLE_API_KEY=

# Google Cloud マップ管理
# https://console.cloud.google.com/google/maps-apis/studio/maps?hl=ja
# 上記APIキー発行と同じプロジェクトで「＋マップIDを作成」→任意の名前・「JavaScript」・「ベクター」を選択
NEXT_PUBLIC_GOOGLE_MAP_ID=

# 日本最大の図書館検索 カーリル
# https://calil.jp/api/dashboard/
# 「図書館APIアプリケーションキー」を発行
NEXT_PUBLIC_CALIL_APP_KEY=

